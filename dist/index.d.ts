// Generated by dts-bundle v0.7.3

declare module 'norma' {
    import "@babel/polyfill";
    import { ContentAdapter } from "norma/content-adapter";
    import { IAdapterConfig } from "norma/interfaces/adapter-config";
    export const getContentAdapter: (adapterConfig: IAdapterConfig) => ContentAdapter;
}

declare module 'norma/content-adapter' {
    import { IAdapterConfig } from "norma/interfaces/adapter-config";
    import { IContent } from "norma/interfaces/content";
    export class ContentAdapter {
        constructor(adapterConfig: IAdapterConfig);
        getContent(contentId: string, locale: string): Promise<IContent>;
    }
}

declare module 'norma/interfaces/adapter-config' {
    export interface IAdapterConfig {
        cms: ICmsConfig;
        contents?: IContentConfig[];
    }
    interface ICmsConfig {
        type: string;
        credentials: any;
    }
    export interface IContentConfig {
        inputType: string;
        outputType?: string;
        propertyAdjustments?: IPropertyConfig[];
    }
    interface IPropertyConfig {
        inputIdentifier?: string | string[];
        outputIdentifier?: string | string[];
        valueConverter?: ValueConverter;
    }
    type ValueConverter = (value: any) => any;
    export {};
}

declare module 'norma/interfaces/content' {
    export interface IContent {
        type: string;
        data: IContentData;
        id: string;
    }
    interface IContentData {
        [key: string]: any;
    }
    export {};
}

