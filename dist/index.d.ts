// Generated by dts-bundle v0.7.3

declare module 'norma' {
    import "@babel/polyfill";
    import { ContentAdapter } from "norma/content-adapter";
    import { IContentConfig, IFieldConfig } from "norma/interfaces/adapter-config";
    import { ICmsAdapter } from "norma/interfaces/cms-adapter";
    export const getContentAdapter: (adapter: ICmsAdapter, contentConfig?: IContentConfig[], fieldConfig?: IFieldConfig[]) => ContentAdapter;
}

declare module 'norma/content-adapter' {
    import { IContentConfig, IFieldConfig } from "norma/interfaces/adapter-config";
    import { ICmsAdapter } from "norma/interfaces/cms-adapter";
    import { IContent } from "norma/interfaces/content";
    export class ContentAdapter {
        constructor(cmsAdapter: ICmsAdapter, contentConfigs?: IContentConfig[], fieldConfigs?: IFieldConfig[]);
        getContent(contentId: string, locale: string): Promise<IContent>;
    }
}

declare module 'norma/interfaces/adapter-config' {
    export interface ICmsConfig {
        type: string;
        credentials: any;
    }
    export interface IContentConfig {
        inputType: string;
        outputType?: string;
        propertyAdjustments?: IPropertyConfig[];
    }
    interface IPropertyConfig {
        inputIdentifier?: string;
        outputIdentifier?: string;
        valueConverter?: ValueConverter;
    }
    export interface IFieldConfig {
        fieldIdentifier: string;
        valueConverter: ValueConverter;
    }
    type ValueConverter = (value: any) => any;
    export {};
}

declare module 'norma/interfaces/cms-adapter' {
    import { IContent } from "norma/interfaces/content";
    export interface ICmsAdapter {
        supportsFieldTypeWiseAdjustment: boolean;
        getNormalizedContentData: (contentId: string, locale: string) => Promise<IContent>;
    }
}

declare module 'norma/interfaces/content' {
    export interface IContent {
        type: string;
        data: IContentData;
        id: string;
    }
    export interface IContentResolved {
        type: string;
        data: IContentDataResolved;
        id: string;
    }
    export interface IContentData {
        [key: string]: {
            value: any;
            fieldType?: string;
        };
    }
    export interface IContentDataResolved {
        [key: string]: any;
    }
}

